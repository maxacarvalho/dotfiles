# Switch PHP versions
phpv() {
    valet stop
    brew unlink php@7.0 php@7.2 php@7.3 php
    brew link --force --overwrite "$1"
    valet start
}

alias php70="phpv php@7.0"
alias php72="phpv php@7.2"
alias php73="phpv php@7.3"
alias php74="phpv php"


# Create a new directory and enter it
function mkd() {
   mkdir -p "$@" && cd "$@" || exit
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-9000}"
	sleep 2 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en0)
	sleep 2 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

function weather() {
   city="$1"

   if [ -z "$city" ]; then
      city="Dublin"
   fi

   eval "curl http://wttr.in/${city}"
}

alias mysqladm='mysql -u root'

#  Commit everything
function commit() {
  commitMessage="$1"

  if [ "$commitMessage" = "" ]; then
     commitMessage="wip"
  fi

  git add .
  eval "git commit -a -m '${commitMessage}'"
}

xdebug() {
  php_version_dot=$(php -r "\$v=explode('.', PHP_VERSION ); echo implode('.', array_splice(\$v, 0, -1));")
  xdebug_conf_path="$(brew --prefix)/etc/php/$php_version_dot/conf.d"
  xdebug_conf_file="ext-xdebug.ini"
  xdebug_conf=${xdebug_conf_path}/${xdebug_conf_file}
  extension_dir=$(php -r "echo PEAR_EXTENSION_DIR;")

  if [ ! -f "$extension_dir"/xdebug.so ]; then
    if [ ! -f "$xdebug_conf" ] && [ ! -f "$xdebug_conf.disabled" ]; then
      echo ""
      echo "The ini file for Xdebug was not found at '$xdebug_conf_path'"
      echo "Did you install Xdebug via PECL?"
      echo "For more informations: http://github.com/w00fz/xdebug-osx/blob/master/README.md"
      echo ""

      exit 1
    else
      STATUS="enabled"

      if [ -f "$xdebug_conf" ] && [ -f "$xdebug_conf.disabled" ]; then
        echo ""
        echo "Detected both enabled and disabled Xdebug ini files. Deleting the disabled one."
        echo ""

        rm -rf "$xdebug_conf.disabled"
        STATUS="enabled"
      elif [ -f "$xdebug_conf.disabled" ]; then
        STATUS="disabled"
      fi

      if [ "$STATUS" = "enabled" ]; then
        echo ""
        echo "Disabling Xdebug..."
        echo ""
        mv "$xdebug_conf" "$xdebug_conf.disabled" 2> /dev/null
        echo ""
        echo "Restarting Laravel Valet..."
        echo ""
        valet restart
        echo ""
      elif [ "$STATUS" = "disabled" ]; then
        echo ""
        echo "Enabling Xdebug..."
        echo ""
        mv "$xdebug_conf.disabled" "$xdebug_conf" 2> /dev/null
        echo ""
        echo "Restarting Laravel Valet..."
        echo ""
        valet restart
        echo ""
      fi
    fi
  else
    echo ""
    echo "Xdebug for PHP $php_version_dot was never installed or not installed via PECL."
    echo "For more informations: http://github.com/w00fz/xdebug-osx/blob/master/README.md"
    echo ""
    exit 1
  fi
}

function db {
    if [ "$1" = "refresh" ]; then
        mysql -uroot -e "drop database $2; create database $2"
    elif [ "$1" = "create" ]; then
        mysql -uroot -e "create database $2"
    elif [ "$1" = "drop" ]; then
        mysql -uroot -e "drop database $2"
    fi
}

function scheduler () {
    while :; do
        php artisan schedule:run
	echo "Sleeping 60 seconds..."
        sleep 60
    done
}
